import { Component } from "react"
import styled from "styled-components";

const BoardDiv = styled.div`
    background-color:darkseagreen;
    width: 100%;
    background: #eab92d;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#eab92d', endColorstr='#c79810', GradientType=1);
`;

const NoteDiv = styled.div`
    height: 150px;
    width: 150px;
    background-color: yellow;
    margin: 2px 0;
    position: absolute;
    cursor: -webkit-grab;
    box-shadow: 5px 5px 15px 0 rgba(0, 0, 0, .2);

    &:active {
        cursor: -webkit-grabbing;
    }
    &:hover > span {
        opacity: 1;
    }
    & > span {
        position: absolute;
        bottom: 2px;
        right: 2px;
        opacity: 0;
        transition: opacity .25s linear;
    }
    & button {
        margin: 2px;
    }
    & > textarea {
        height: 75%;
        background: rgba(255, 255, 255, .5);
    }
    .glyphicon-plus {
        position: fixed;
        top: 10px;
        right: 10px;
    }
`;

class Note extends Component{
    constructor(props) {
        super(props)
        this.edit = this.edit.bind(this)
        this.remove = this.remove.bind(this)
        this.save = this.save.bind(this)
        this.handleClick = this.handleClick.bind(this)
        this.renderDisplay = this.renderDisplay.bind(this)
        this.renderForm = this.renderForm.bind(this)
        this.state = {
            checked : false,
            editing : false
        }
    }
    
    //Event methods
    componentWillMount() {
        this.style = {
            right : this.randomBetween(0, window.innerWidth-150) + 'px',
            top : this.randomBetween(0, window.innerHeight - 150) + 'px',
            transform : 'rotate( ' + this.randomBetween(-15, 15) + 'deg)'                    
        }                         
    }
    componentDidMount() {
        var mine = this._input        
        $(mine).draggable()
    }
    randomBetween(min, max) {
        return (min + Math.ceil(Math.random() * max))
    }
    edit() {
      this.setState({editing : true})
    }
    save() {
        this.props.onChange(this.refs.newText.value, this.props.index)
        this.setState({editing : false})
    }
    remove() {
        this.props.onRemove(this.props.index)
    }
    handleClick() {
        this.setState({checked: !this.state.checked})
    }
    
    renderDisplay() {
        return (
            <NoteDiv 
                ref={(c) => this._input = c} 
                style = {this.style}
            > 
                <p>{this.props.children}</p>
                    <span>
                        <button 
                            onClick={this.edit} 
                            className='btn btn-primary glyphicon glyphicon-pencil'
                        >
                            edit
                        </button>
                        <button 
                            onClick={this.remove} 
                            className='btn btn-danger glyphicon glyphicon-trash'
                        >
                            delete
                        </button>
                    </span>
            </NoteDiv>
        )
    }
    renderForm() {
        return(
            <NoteDiv 
                ref="myNote" 
                style={this.style} 
            >
                <textarea 
                    ref='newText' 
                    defaultValue={this.props.children} 
                    className='form-control'
                />
                <button 
                    className='btn btn-success btn-sm glyphicon glyphicon-floppy-disk' 
                    onClick={this.save}
                >
                    save
                </button> 
            </NoteDiv>
        )
    }
    render() {
        if(this.state.editing)return this.renderForm()
        else return this.renderDisplay()
    }
}

//parent component for notes
class Board extends Component{
    constructor() {
        super()
        this.update = this.update.bind(this)
        this.eachNote = this.eachNote.bind(this)
        this.remove = this.remove.bind(this)
        this.add = this.add.bind(this)
        this.state = {
            notesStringArray : []
        }
    }
    
    //Event methods
    nextId() {
        this.uniqueId = this.uniqueId || 0
        return this.uniqueId++
    }
    update(newText, i) {
        var arr = this.state.notesStringArray
        arr[i].note = newText
        this.setState({notesStringArray : arr})
    }
    eachNote(element, i) {
        return(
            <Note 
                key={element.id}
                index={i}
                onChange={this.update}
                onRemove={this.remove}
            >
                {element.note}
            </Note>
        )
    }
    remove(index) {
        var arr = this.state.notesStringArray
        var elm = arr[index]
        arr.splice(index, 1)
        this.setState({notesStringArray : arr})
        return elm
    }
    componentWillMount() {
        var self = this
        if(this.props.count) {
            $.getJSON('http://baconipsom.com/api/?type=all-meat&sentences=' + this.props.count + '&start-with-lorem=1&callback=?', function(results) {
                var data = results[0].split('. ').forEach(function(sentence) {
                   self.add(sentence.substring(0, 40)) 
                })
            })        
        }
    }
    add(text) {        
        var arr = this.state.notesStringArray
        arr.push({
            id : this.nextId(),
            note : text
        })
        JSON.stringify(arr)
        this.setState({notesStringArray : arr})
    }
    
    render() {
        return(
            <BoardDiv>
                {this.state.notesStringArray.map(this.eachNote)}
                <button 
                    className='btn btn-sm glyphicon glyphicon-plus btn-success' 
                    onClick={this.add.bind(null, "New Note!")}
                >
                    +
                </button>    
            </BoardDiv>
        )
    }
}


Board.propTypes = {
    count : function(props, propName) {
        if(typeof props[propName] !== "number") {
            return new Error('THe count property must be a number')
        }
        if(props[propName] > 100) {    
            return new Error('Creating '+props[propName] + 'notes is ridiculous ')
        }
    }
}

ReactDOM.render(<Board count={50}></Board>, document.getElementById('react-container'))



----


    &:hover {
        text-decoration-line: line-through;
        text-decoration-thickness: .15em;
        text-decoration-color: ${props => props.hoverColor};
    }

----


    _portFolio(){
        const portFolioObj = {}

        all_portFolio.map(v => Object.assign(portFolioObj, {
            [v.title] : {
                "bool" : false,
                "component" : v.component
        }}))
        Object.assign(portFolioObj, {
            "Home": {
                "bool" : true,
                "component" : Projects(this.portFolioClick)
        }})
        this.setState({ portFolio : portFolioObj })
    }

----

    portFolioClick(v){
        console.log(this.state.portFolio)
        const portFolioObj = this.state.portFolio

        for(let key in portFolioObj) portFolioObj[key]["bool"] = false
        
        portFolioObj[v]["bool"] = true

        this.setState({ portFolio : portFolioObj })
    }

----

        const truePortFolio = findObject(portFolio, true)
                    {truePortFolio && truePortFolio["component"]}

----

import { Component } from "react";
import { Route } from 'react-router-dom';
import styled from 'styled-components';
import AboutMe from "../components/_AboutMe.jsx";
import Contact from "../components/_Contact.jsx";

import { line_1, line_3, rainbow, app_menu, app_aboutMe, all_portFolio, findObject } from '../_data/_Functions.jsx';

const LeftDiv = styled.div`
    position: fixed;
    z-index: 100;
    width: 30vw;
    height: 100vh;
    top: 0;
    background-color: #EEE; 
    overflow: hidden;

    .index {
        @media all and (min-width:0px) and (max-width:1080px) {transform: scale(0.8, 0.8);}
        @media all and (min-width:1081px) {transform: scale(1, 1);}
        transform-origin: top right;
        transition: all .2s ;
        position: absolute;
        z-index: 100;
        width: 35px;
        height: 50vh;
        margin-top: 3.5em;
        right: 0;
        float: right;
    }
    &:hover .index {
        @media all and (min-width:0px) and (max-width:1080px) {transform: scale(1.2, 1.2);}
        @media all and (min-width:1081px) {transform: scale(1.4, 1.4);}
    }
    .menu {
        position: fixed;
        display: grid;
        grid-gap: 15px;
        margin-left: -30px;
        bottom: 60px;
    }
`;
const IndexContent = styled.button`
    width: 40px;
    height: 35px;
    float: right;
    padding: 0;
    white-space: nowrap;
    transition: all .2s ease;
    background-color: ${props => props.color};
    
    &:hover {
        width: 105px;
    }
    .img {
        opacity: 1;
        margin-left: 50px;
        border: 2.5px solid ${props => props.color};
        width: 30px;
        height: 30px;
    }
    .title {
        right: 120px;
        margin-top: -35px;
        position: absolute;
        opacity: 0;
    }
    &:hover .title {
        opacity: 1;
    }
`;
const MenuDiv = styled.div`
    button {
        padding-left: 30px;
        width: 210px;
        height: 54px;
        border: ${line_3};
        box-shadow: 5px 5px black;

        .open {
            font-weight: 400;
            font-size: 21px;
            width: 210px;
            letter-spacing: -1px;
            text-align: center;
            align-items: auto;
        }
        .close {
            position: absolute;
            color: white;
            z-index: 100;
            margin-left: ${props => props.leftText};
            margin-top: ${props => props.marginText};
            font-size: 12px;
            font-weight: 600;
            white-space: nowrap;
            transform: rotate(-90deg);
        }
    }
    .postIt {
        &:hover {
            text-decoration-line: line-through;
            text-decoration-thickness: 3.5px;
            box-shadow: 6px 6px 6px #999;
        }
        &:active {
            text-decoration-line: line-through;
            text-decoration-thickness: 2px;
            box-shadow: 2px 2px 2px #666;
        }
    }
    .postItAfter {
        width: ${props => props.width};
        box-shadow: none;
        border-right: 0px;

        &:hover {
            box-shadow: -4px 3.5px 3.5px rgba(0, 0, 0, .5);
        }
        &:after {
            content: "";
            position: absolute;
            width: 58px;
            height: ${props => props.height};
            left: ${props => props.left};
            margin-top: ${props => props.margin};
            background-color: black;
        }
        &:hover:after {
            box-shadow: 0em -.1em .8em rgba(0, 0, 0, .3);
        }
        &:before {
            content: "";
            position: absolute;
            left: ${props => props.left};
            margin-top: -29px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 58px 58px 0 0;
            border-color: black transparent transparent transparent;
        }
    }
`;



class Left extends Component {
    constructor(props){
        super(props)
        this.state = {
            menu: {}, 
            aboutMe: {},
            portFolio: {},
        }
        this.postItHandler = this.postItHandler.bind(this)
        this.postItClose = this.postItClose.bind(this)
        this.postItReorder = this.postItReorder.bind(this)
    }

    componentDidMount(){
        this._menu()
        this._aboutMe()
    }
    _menu(){
        const menuObj = {}
        
        app_menu.map(v => Object.assign(menuObj, {
            [v.title] : false
        }))
        this.setState({ menu : menuObj })
    }
    _aboutMe(){
        const aboutMeObj = {}

        app_aboutMe.map(v => Object.assign(aboutMeObj, {
            [app_aboutMe.indexOf(v)] : {
                "value": app_aboutMe.indexOf(v),
                "bool" : false
        }}))
        this.setState({ aboutMe : aboutMeObj })
    }
    postItHandler(v){
        const bool = this.state.menu[v]
        const menuObj = this.state.menu
        const aboutMeObj = this.state.aboutMe
        
        if(v === "AboutMe"){
            if(bool === true){
                for(let key in aboutMeObj){
                    aboutMeObj[key]["value"] = parseInt(key)
                    aboutMeObj[key]["bool"] = false
            }}else{ 
                for(let key in aboutMeObj){
                    aboutMeObj[key]["bool"] = true    
        }}}
        menuObj[v] = !bool

        this.setState({
            menu : menuObj,
            aboutMe : aboutMeObj
        })
    }
    postItClose(num){
        const aboutMeObj = this.state.aboutMe
        aboutMeObj[num]["bool"] = false

        this.setState({ aboutMe : aboutMeObj })
    }
    postItReorder(num){
        const aboutMeObj = this.state.aboutMe
        const last = Object.keys(aboutMeObj).length-1

        for(let key in aboutMeObj) aboutMeObj[key]["value"]--

        aboutMeObj[num]["value"] = last
        this.setState({ aboutMe : aboutMeObj })
    }


    render(){
        const { menu, aboutMe }  = this.state

        return(<>
            {menu["AboutMe"] 
                ? app_aboutMe.map((v, i) => 
                    aboutMe[i]["bool"] 
                    ? <AboutMe 
                        close={this.postItClose}
                        order={this.postItReorder}
                        value={aboutMe[i]["value"]} 
                        tape={v["tape"]}
                        width={v["width"]}
                        color={v["color"]}
                        borColor={v["borColor"]}
                        content={v["content"]}
                        key={i}
                        num={i}/>
                    : null)
                : null
            }
            {menu["Contact"] 
                ? <Contact/> 
                : null
            }
            <LeftDiv>
                <div className="index">
                    {all_portFolio.map(v => 
                        <IndexContent 
                            color={v["color"]}
                            key={v["title"]}
                        >
                            <img className="img" src={v["img"]} alt={""}/>
                            <div className="title">{v["title"]}</div>
                        </IndexContent>
                    )}
                </div>
                <div className="menu">
                    {app_menu.map(v =>
                        <MenuDiv
                            left={v["left"]}
                            leftText={v["leftText"]}
                            margin={v["margin"]}
                            marginText={v["marginText"]}
                            height={v["height"]}
                            width={v["width"]}
                            key={v["title"]}
                        > 
                            <button 
                                onClick={()=> this.postItHandler(v["title"])}
                                className={menu[v["title"]] ? "postItAfter": "postIt"}
                                style={{backgroundColor: v["color"]}} 
                            >
                                {menu[v["title"]] 
                                    ? <div className="close">Close All</div>
                                    : <div className="open">{v["title"]}</div>
                                }
                            </button>
                        </MenuDiv>
                    )}
                </div>
            </LeftDiv>
        </>)
    }
}

export default Left;

----

import { Component } from "react";
import { Route } from 'react-router-dom';

import styled from 'styled-components';

import { line_1, line_3, rainbow, app_menu, app_aboutMe, all_portFolio, findObject } from '../_data/_Functions.jsx';


const RightDiv = styled.div`
    margin-left: 30vw;
    top: 0;

    header {
        display: flex;  
        position: fixed;
        z-index: 100;
        border-left: ${line_1};
        border-bottom: ${line_1};
        background-color: white;
        width: 70vw;
        height: 3.5em;

        button {
            font-size: 1.5em;
            font-weight: 500;
            width: 100%;
            text-align: center;
            letter-spacing: -.01em;
        }
        button:after { 
            content: "";
            position: absolute;
            width: 30%;
            height: .12em;
            left: 35%;
            right: 35%;
            top: 50%;
            bottom: 50%;
            visibility: hidden;
            background: ${rainbow};
        }
        button:hover:after { 
            visibility: visible;
        }
    }

    .rightContents {
        border-left: ${line_1};
        position: fixed;
        z-index: 50;
        width: 70vw;
        overflow: auto;
        margin-top: 3.5em;
        height: 100%;
    }
`;


class Right extends Component {
    render(){
        return(
            <RightDiv>
                <header>
                    <button>
                        Home
                    </button>
                </header>
                <div className="rightContents">
                </div>
            </RightDiv>
        )
    }
}

export default Right;

----


const FooterDiv = styled.div`
    width: ${all_div["RWidth"]}vw;
    margin-left: ${all_div["LWidth"]}vw;
    height: 8vh;
    margin-top: 92vh;
    position: fixed;
    overflow: scroll;
    border-left: ${line_1};
    border-top: ${line_1};
    background-color: ${deepYellow};
    
`;

----

cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='9.84 41.6 14.73 39.16 22.07 31.82 22.07 34.27 26.96 44.05 31.85 44.05 31.85 39.16 26.96 29.38 36.74 29.38 36.74 26.93 9.84 0.03 9.84 41.6'/%3E%3Cpolygon class='cls-2' points='12.29 4.92 14.73 4.92 14.73 2.48 12.29 2.48 12.29 0.03 9.84 0.03 9.84 41.6 14.73 41.6 14.73 39.16 12.29 39.16 12.29 4.92'/%3E%3Crect class='cls-2' x='14.73' y='4.92' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='17.18' y='7.37' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='19.63' y='9.82' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='22.07' y='12.26' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='24.52' y='14.71' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='26.96' y='17.15' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='29.41' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='31.85' y='22.04' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='34.3' y='24.49' width='2.45' height='2.45'/%3E%3Cpolygon class='cls-2' points='36.74 26.93 36.74 29.38 26.96 29.38 26.96 34.27 29.41 34.27 29.41 31.82 39.19 31.82 39.19 26.93 36.74 26.93'/%3E%3Crect class='cls-2' x='29.41' y='34.27' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='26.96' y='44.05' width='4.89' height='2.45'/%3E%3Crect class='cls-2' x='24.52' y='39.16' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='22.07' y='34.27' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='19.63' y='31.82' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='17.18' y='34.27' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='14.73' y='36.71' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='31.85' y='39.16' width='2.45' height='4.89'/%3E%3C/svg%3E"), auto; 
cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='13.29 2.48 10.84 2.48 10.84 24.49 7.4 24.49 7.4 23.04 3.51 23.04 3.51 24.49 1.06 24.49 1.06 29.38 3.51 29.38 3.51 31.82 5.95 31.82 5.95 36.71 8.4 36.71 8.4 41.6 10.84 41.6 10.84 46.5 13.29 46.5 13.29 53.83 35.74 53.83 35.74 46.5 38.19 46.5 38.19 39.16 40.63 39.16 40.63 23.04 39.19 23.04 39.19 22.04 38.19 22.04 38.19 20.6 36.74 20.6 36.74 19.6 35.74 19.6 35.74 18.15 31.85 18.15 31.85 17.15 30.85 17.15 30.85 15.34 24.52 15.34 24.52 14.71 23.52 14.71 23.52 13.26 18.63 13.26 18.63 2.48 16.18 2.48 16.18 1.03 13.29 1.03 13.29 2.48'/%3E%3Crect class='cls-2' x='2.51' y='29.38' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='4.95' y='31.82' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='2.51 24.49 7.4 24.49 7.4 22.04 2.51 22.04 2.51 24.49 0.06 24.49 0.06 29.38 2.51 29.38 2.51 24.49'/%3E%3Cpolygon class='cls-2' points='9.84 26.93 9.84 29.38 12.29 29.38 12.29 2.48 9.84 2.48 9.84 24.49 7.4 24.49 7.4 26.93 9.84 26.93'/%3E%3Crect class='cls-2' x='7.4' y='36.71' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='9.84' y='41.61' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='34.3 51.39 14.73 51.39 14.73 46.5 12.29 46.5 12.29 53.83 36.74 53.83 36.74 46.5 34.3 46.5 34.3 51.39'/%3E%3Crect class='cls-2' x='36.74' y='39.16' width='2.45' height='7.34'/%3E%3Crect class='cls-2' x='12.29' y='0.03' width='4.89' height='2.45'/%3E%3Cpolygon class='cls-2' points='17.18 24.49 19.63 24.49 19.63 14.71 24.52 14.71 24.52 12.26 19.63 12.26 19.63 2.48 17.18 2.48 17.18 24.49'/%3E%3Cpolygon class='cls-2' points='24.52 24.49 26.96 24.49 26.96 17.15 31.85 17.15 31.85 14.71 24.52 14.71 24.52 24.49'/%3E%3Cpolygon class='cls-2' points='31.85 26.93 34.3 26.93 34.3 19.6 36.74 19.6 36.74 17.15 31.85 17.15 31.85 26.93'/%3E%3Crect class='cls-2' x='36.74' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='39.19' y='22.04' width='2.45' height='17.12'/%3E%3C/svg%3E"), pointer;
cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='13.29 2.48 10.84 2.48 10.84 24.49 7.4 24.49 7.4 23.04 3.51 23.04 3.51 24.49 1.06 24.49 1.06 29.38 3.51 29.38 3.51 31.82 5.95 31.82 5.95 36.71 8.4 36.71 8.4 41.6 10.84 41.6 10.84 46.5 13.29 46.5 13.29 53.83 35.74 53.83 35.74 46.5 38.19 46.5 38.19 39.16 40.63 39.16 40.63 23.04 39.19 23.04 39.19 22.04 38.19 22.04 38.19 20.6 36.74 20.6 36.74 19.6 35.74 19.6 35.74 18.15 31.85 18.15 31.85 17.15 30.85 17.15 30.85 15.34 24.52 15.34 24.52 14.71 23.52 14.71 23.52 13.26 18.63 13.26 18.63 2.48 16.18 2.48 16.18 1.03 13.29 1.03 13.29 2.48'/%3E%3Crect class='cls-2' x='2.51' y='29.38' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='4.95' y='31.82' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='2.51 24.49 7.4 24.49 7.4 22.04 2.51 22.04 2.51 24.49 0.06 24.49 0.06 29.38 2.51 29.38 2.51 24.49'/%3E%3Cpolygon class='cls-2' points='9.84 26.93 9.84 29.38 12.29 29.38 12.29 2.48 9.84 2.48 9.84 24.49 7.4 24.49 7.4 26.93 9.84 26.93'/%3E%3Crect class='cls-2' x='7.4' y='36.71' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='9.84' y='41.61' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='34.3 51.39 14.73 51.39 14.73 46.5 12.29 46.5 12.29 53.83 36.74 53.83 36.74 46.5 34.3 46.5 34.3 51.39'/%3E%3Crect class='cls-2' x='36.74' y='39.16' width='2.45' height='7.34'/%3E%3Crect class='cls-2' x='12.29' y='0.03' width='4.89' height='2.45'/%3E%3Cpolygon class='cls-2' points='17.18 24.49 19.63 24.49 19.63 14.71 24.52 14.71 24.52 12.26 19.63 12.26 19.63 2.48 17.18 2.48 17.18 24.49'/%3E%3Cpolygon class='cls-2' points='24.52 24.49 26.96 24.49 26.96 17.15 31.85 17.15 31.85 14.71 24.52 14.71 24.52 24.49'/%3E%3Cpolygon class='cls-2' points='31.85 26.93 34.3 26.93 34.3 19.6 36.74 19.6 36.74 17.15 31.85 17.15 31.85 26.93'/%3E%3Crect class='cls-2' x='36.74' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='39.19' y='22.04' width='2.45' height='17.12'/%3E%3C/svg%3E"), pointer;

----

/* font-family: 'Noto Sans KR' !important; */

----

const DictionaryDiv = styled.div`
    margin-top: .5rem;
    margin-left: 20%;
    margin-bottom: 50vh;
    text-align: justify;

    .dicContent {
        margin-left: 5%;
        margin-top: .5rem;
        letter-spacing: -.01rem;
        line-height: 1.2rem;
        font-family: 'Cormorant Garamond', serif;
        font-size: .8rem;
    }
    strong {
        margin-left: -5%;
        font-weight: 600;
        word-spacing: -.1rem;
        font-size: .64rem;
        font-family: 'IBM Plex Mono', monospace;
    }
`;
<div className="title">
Remark
</div>
<DictionaryDiv>
    <div className="dicContent">
        <strong>Assignment</strong> To design a new website and shopping experience with a high emphasis on user interactivity and brand content in a
functional yet beautiful design.
    </div>
    <div className="dicContent">
        <strong>Objective</strong> To create a better online e-commerce shopping experience for customers while also increasing awareness between social media and the product catalogue.
    </div>
    <div className="dicContent">
        <strong>Project Includes</strong> 
            <br/>Design Ideation
            <br/>Design Direction
            <br/>Final Design
            <br/>Design Presentation
    </div>
</DictionaryDiv>


----

import debounce from "lodash.debounce";
     const resetting = () => {
        setScrl(false)
        scrlRef.current.reset()
    }
    const reset = debounce(resetting, 250,  {'leading': true})


----
 
    position: absolute;
    z-index: 100000000;
    width: 40px;
    height: 40px;
    border: 3px solid #000000;
    border-radius: 100%;
    transform: translate(-25px, 40px) ${({theme}) => theme.scale};
    opacity: ${({theme}) => theme.opacity};
    pointer-events: none;
    transition: all .2s ease;
    transition-property: background-color, opacity, transform;

----

    const [scrl, setScrl] = useState(false)     const scrlRef = useRef()
ref={scrlRef}
    const reset = () => {
        setScrl(true)

        if(timer) { clearTimeout(timer) }
        const newTimer = setTimeout(async () => {
            await scrlRef.current.reset()
            setScrl(false)
        }, 100)

        setTimer(newTimer)
    }
            <Cursor
                scrolled={scrl}
            />
    const [timer, setTimer] = useState(0) 

        <ReactCursorPosition>
        </ReactCursorPosition>

import ReactCursorPosition from "react-cursor-position";

import Cursor from "../components/_Cursor.jsx";


----

    const [sticky, setSticky] = useState(false)

    const callBack = useCallback(([entry]) => {
        if(entry.isIntersecting || entry.boundingClientRect.top > 50) {
            setSticky(false)
        }else{
            setSticky(true)
        }
    },[])
    const options = {
        root: null,
        rootMargin: "100px"
    }


    useEffect(() => {
        const observer = new IntersectionObserver(callBack, options)
        
        if(ref.current) observer.observe(ref.current)
        return () => {if(ref.current) observer.unobserve(ref.current)}

    }, [ref])
            <div 
                ref={ref} 
                onClick={intoEl} 
                className="notSticky"
                style={{opacity : sticky? "0" : "1"}}
            >
                {text}
            </div>



            {pageStyle.map((v, i) =>
                <PageStyle 
                    el={styRefs.current[i]}
                    text={v}
                    key={i}
                    ord={i}
                />)}


const FolioListDiv = styled.div`
    margin-top: ${({divMargin}) => divMargin.marginTop}%;
    margin-bottom: ${({divMargin}) => divMargin.marginBottom}%;
    margin-left: ${({divMargin}) => divMargin.marginLeft}%;
    margin-right: ${({divMargin}) => divMargin.marginRight}%;
    display: grid;
    grid-template-columns: repeat(${({grid}) => grid}, 1fr);
    grid-gap: .7rem;
    grid-auto-rows: minmax(5rem, auto);
`;
FolioListDiv.defaultProps = {
    divMargin: {
        marginTop: "10",
        marginBottom: "10",
        marginLeft: "3.5",
        marginRight: "5",
}}

const FolioCell = styled.div`
    position: relative;
    width: 100%;
    -webkit-filter: drop-shadow(.12rem .1rem .12rem rgba(0,0,0,0.6));
    background-color: white;
    background: radial-gradient(
        transparent 0rem, 
        transparent .15rem, 
        white .15rem,
        white
    );
    background-size: .4rem .4rem;
    background-position: -4.2rem -4.2rem;

    &:before {
        content: "";
        position: absolute;
        background-color: white;
        z-index: -1;
        top: .1rem;
        bottom: .1rem;
        left: .2rem;
        right: .08rem;
    }

    .cellWrap {
        position: relative;
        width: 88%;
        margin-left: 6%;
        margin-right: 6%;
        margin-top: 6%;
        margin-bottom: 6%;
        background-color: ${({backColor}) => backColor};

        &:after { 
            content: "";
            position: absolute;
            border-top: 0.25rem solid ${({mainColor}) => mainColor};
            width: 100%;
            margin-left: -6%;
            height: 50%;
            transform: translateY(-100%);
            visibility: hidden;
        }
        &:hover:after { 
            visibility: visible;
        }

        .cellWrapInside {

            .img {
                ${({category}) => category == "Branding" 
                    ? `display: block;
                    margin: auto;
                    width: 100%;`
                    : (category == "Editorial" 
                    ? `display: block;
                    margin: auto;
                    width: 100%;`
                    : (category == "Poster"
                    ? `display: block;
                    margin: auto;
                    width: 100%;
                    object-fit: cover;`
                    : (category == "UI/UX"
                    ? `display: block;
                    margin: auto;
                    width: 100%;`
                    : null)))
                }}
            .content_text {
                position: absolute;
                top: 0;
                font-size: ${theme.fontObjs["cell"]["fontSize"]};
                font-weight: ${theme.fontObjs["cell"]["fontWeight"]};
                font-family: ${theme.fontObjs["cell"]["fontFamily"]};
                letter-spacing: -.05rem;

                strong {
                    font-weight: ${theme.fontObjs["cell"]["strong"]["fontWeight"]};
                    letter-spacing: -.03rem;
            }}
        }
    }
`;
const FolioCellEmpty = styled.div`
    background-color: ${theme.colorObjs["cellEmptyBackColor"]};
    border: ${theme.lines["cellEmptyLine"]};
    position: relative;
    left: 2%;
    top: 2%;
    width: 96%;
    height: 95%;
    &:before {
        color: ${theme.colorObjs["cellEmptyTextColor"]};
        content: "✂";
        font-size: 1.8rem;
        position: absolute;
        margin-top: -.9rem;
        left: 45%;
    }
    .ment {
        color: ${theme.colorObjs["cellEmptyTextColor"]};
        font-size: ${theme.fontObjs["cellEmpty"]["fontSize"]};
        font-weight: ${theme.fontObjs["cellEmpty"]["fontWeight"]};
        font-family: ${theme.fontObjs["cellEmpty"]["fontFamily"]};
        font-style: ${theme.fontObjs["cellEmpty"]["fontStyle"]};
        position: absolute;
        left: 10%;
        white-space: nowrap;
        bottom: 0;
    }
`;

const FolioList = ({folioArr, category, divMargin, name}) => {
    const folioList = findCategory(folioArr, category, name)
    const length = folioList.length
    const mentArr = shuffle(mentInEmptyCell)
    const grid = getGrid(useWindowSize().width)
    
    let num

    if(grid >= length)num =  grid-length
    if(grid < length)num = grid-(length%grid)

    const emArr = mentArr.slice(0, num)
    
    return(
        <FolioListDiv 
            divMargin={divMargin}
            grid={grid}
        >
            {folioList.map(v => 
                <FolioCell
                    key={v["title"]}
                    category={v["category"]}
                    mainColor={v["mainColor"]}
                    backColor={v["backColor"]}
                >
                    <NavLink to={v["title"]}>
                        <div className="cellWrap">
                            <div className="cellWrapInside">
                                <img 
                                    className="img" 
                                    src={v["img"]} 
                                    alt={""}/>
                                <div className="content_text">
                                    <strong>{v["title"]}</strong> {v["category"]}
                                </div>
                            </div>
                        </div>
                    </NavLink>
                </FolioCell>)}
            {emArr !== Array(0) 
                ? emArr.map(v =>
                    <FolioCellEmpty
                        key={v}
                    >
                        <div className="ment">{v}</div>
                    </FolioCellEmpty>)
                : null}
        </FolioListDiv>
    )
}



    &:after { 
        content: "";
        position: absolute;
        z-index: 1000;
        height: .15rem;
        left:30%;
        right: 30%;
        bottom: 50%;
        visibility: hidden;
        background: ${theme.colorObjs["homeButtonHover"]};
    }
    &:hover:after { 
        visibility: visible;
    }

const FolioCell = styled.div`
    position: relative;
    width: 100%;
    padding-bottom: 25%;
    -webkit-filter: drop-shadow(.12rem .1rem .12rem rgba(0,0,0,0.6));
    background-color: white;
    background: radial-gradient(
        transparent 0rem, 
        transparent .15rem, 
        white .15rem,
        white
    );
    background-size: .4rem .4rem;
    background-position: -4.2rem -4.2rem;

    &:before {
        content: "";
        position: absolute;
        background-color: white;
        z-index: -1;
        top: .1rem;
        bottom: .1rem;
        left: .2rem;
        right: .08rem;
    }
`;


//---

${({category}) => category === "Branding" 
        ? `
            bottom: 4%;
            height: 1rem; 
            display: flex;
            justify-content: space-between;      

            .title {
                letter-spacing: -.055rem; 
                font-size: 1.1rem; //a6
                font-weight: 500; //500 
            }
            .category {
                margin-left: .45rem;
                letter-spacing: -.04rem; 
                font-size: 0.7rem; //a9
                font-weight: 400; //r
            }
            .year {
                display: none;
            }`
        : (category === "Editorial" 
        ? `
            bottom: 0;
            font-size: 0.7rem; 
            font-weight: 500; //500 
            font-style: italic;  
            letter-spacing: -.02rem; 
            width: 100%;
            margin: 0 auto;
            display: flex;
            justify-content: center;

            .category {
                margin-left: .4rem;
            }
            .year {
                margin-left: .4rem;
                font-size: 0.7rem; 
                font-weight: 300; //
            }`
        : (category === "Poster"
        ? `
            top: 2%;
            font-size: 1rem; 
            font-weight: 600;
            letter-spacing: -.01rem; 
            width: 100%;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            font-family: 'Cormorant Garamond', serif;

            .category {
                margin-left: .3rem;
            }
            .year {
                margin-left: .3rem;
                font-weight: 300; //
                font-style: italic;  
            }`
        : (category === "UI/UX"
        ? `
            width: 100%;
            height: 100%;

            .title {
                font-size: 1rem; 
                font-weight: 500;
                word-spacing: -.18rem;
                letter-spacing: -.03rem;
                position: absolute;
                bottom: .35rem;
                left: .5rem;
            }
            .category {
                font-size: .7rem; 
                font-weight: 400;
                letter-spacing: -.02rem;
                position: absolute;
                bottom: 1.4rem;
                left: .55rem;
            }
            .year {
                font-size: .8rem; 
                position: absolute;
                top: .2rem;
                right: .5rem;
                font-weight: 400; 
                letter-spacing: -0.02rem; 
            }`
        : null)))
    }

    //----

        ${({category}) => category === "Branding" 
        ? "margin-top: 0; margin-bottom: auto;"
        : (category === "Editorial" 
        ? "margin: auto;"
        : (category === "Poster"
        ? "object-fit: cover;"
        : (category === "UI/UX"
        ? "margin: auto;"
        : null)))
    }


    //----
import Gmf from "../pages/Gmf.js"
import GmfImg from "./img/Gmf.png"

    "GMF Festival": {
        "title": "GMF Festival",
        "category": "Branding",
        "mainColor" : theme.colorObjs["gmfSubColor"],
        "backColor" : theme.colorObjs["gmfBackColor"],
        "textColor" : theme.colorObjs["gmfTextColor"],
        "year" : "2017",
        "img" : GmfImg,
        "componentR" : Gmf,
        "componentL" : null,
        "tag" : {
            "Assignment" : "This is a project that visualizes sentiment data for a region by utilizing the website UI.",
            "Solution" : "This is a project that visualizes sentiment data for a region by utilizing the website UI.",
            "Project Includes" : "Logo / Editorial / Infographic"
        }
    },



    "We Eat Breakfast": {
        "title": "We Eat Breakfast",
        "category": "Branding",
        "mainColor" : theme.colorObjs["weEatSubColor"],
        "backColor" : theme.colorObjs["weEatBackColor"],
        "textColor" : theme.colorObjs["weEatTextColor"],
        "year" : "2017",
        "img" : WeEatImg,
        "componentR" : WeEat,
        "componentL" : null,
        "tag" : {
            "Assignment" : "This is a project that visualizes sentiment data for a region by utilizing the website UI.",
            "Solution" : "This is a project that visualizes sentiment data for a region by utilizing the website UI.",
            "Project Includes" : "Logo / Editorial / Infographic"
        }
    },




        .eng {
            line-height: 1.2rem;
            font-size: ${theme.fontObjs["subTag"]["introContentExp"]["eng"]["fontSize"]};  
            font-style: ${theme.fontObjs["subTag"]["introContentExp"]["eng"]["fontStyle"]};
            font-weight: ${theme.fontObjs["subTag"]["introContentExp"]["eng"]["fontWeight"]};
            font-family: ${theme.fontObjs["subTag"]["introContentExp"]["eng"]["fontFamily"]};
        }
        .kor {
            transition-delay: .15s;
            line-height: 1.2rem;
            padding-top: 2rem;
            padding-bottom: 1.5rem;
            padding-left: 1rem;
            padding-right: 1.5rem;
            margin-top: -7rem;
            background-image: url("${craft}");
            background-position: center; 
            background-repeat: no-repeat;
            background-size: cover;
            color: ${theme.colorObjs["subTagTranslateTextColor"]};
            border-bottom: ${theme.lines["subTagTranslateLine"]};
            border-right: ${theme.lines["subTagTranslateLine"]};
            font-size: ${theme.fontObjs["subTag"]["introContentExp"]["kor"]["fontSize"]};  
            font-style: ${theme.fontObjs["subTag"]["introContentExp"]["kor"]["fontStyle"]};
            font-weight: ${theme.fontObjs["subTag"]["introContentExp"]["kor"]["fontWeight"]};
            font-family: ${theme.fontObjs["subTag"]["introContentExp"]["kor"]["fontFamily"]};
            letter-spacing: -0.03rem;
            word-spacing: .16rem;
            border-radius: .15rem;
            visibility: hidden;
            transform: rotate(0deg);
            transition: transform .05s, visibility .05s;

            &:before {
                content: "";
                display: block;
                position: absolute;
                top: -30%;
                left: 30%;
                margin: auto;
                background-color: ${theme.colorObjs["subTagTranslateTapeColor"]};
                transform: rotate(${({rotate}) => -rotate*2}deg);
                width: 15%;
                height: 40%;
            }
        }


    &:hover .tagContentExp > .kor {
        visibility: visible;
        transform: rotate(${({rotate}) => rotate*3}deg);
    }


    import { useState, useEffect} from "react";
import styled from "styled-components";


const CursorDiv = styled.div`
    position: absolute;
    z-index: 100000000;
    width: 9rem;
    height: 9rem;
    border-radius: 9rem;
    border: .4rem solid black;
    transform: translate(-4.5rem, 12rem) scale(1.0);
    opacity: ${({active}) => active === true ? "1" : "0"};
    pointer-events: none;
    transition: all .05s ease;
    transition-property: background-color, opacity, transform, width, height;
`;

const Cursor = ({
        position: {x, y}, 
        detectedEnvironment: {isMouseDetected, isTouchedDected},
        isActive,
        logo
    }) => {

    const [position, setPosition] = useState({ x: 0, y: 0 })
    const [clicked, setClicked] = useState(false)
    const [linkHovered, setLinkHovered] = useState(false)

    useEffect(() => {
        setPosition({ x: x, y: y })
    }, [x, y])

    return (
        <CursorDiv
            active={isActive}
            style={{ left: `${position.x}px`, top: `${position.y}px`}}
        >
        </CursorDiv>
    )
}

export default Cursor;


        //    <svg style={{position: "absolute", zIndex: "1"}} className="logo">
        //         <defs>
        //             <clipPath id="mask">
        //                 <circle id="mask-circle" cx={x} cy={y} r="10%" style={{fill: "#ffffff"}}/>
        //             </clipPath>
        //         </defs>
        //         <g clip-path="url(#mask)">
        //             {logo}
        //         </g>
        //         <circle id="circle-shadow" cx={x} cy={y} r="10%" style={{stroke: "#000", fill: "transparent", strokeWidth: "5"}} />
        //     </svg>






    useEffect(() => {
        const bounds = imgRef.current.getBoundingClientRect()
        setImgCor(bounds)
    }, [])



    // const tapeStyle = {
    //     position: "absolute",
    //     marginTop: "-2.5rem",
    //     left: "29vw",
    //     width: "2.5rem",
    //     height: "5rem",
    //     borderTop: `.2rem dotted ${tape && tape["color"]}`,
    //     borderBottom: `.2rem dotted ${tape && tape["color"]}`,
    //     transform: `rotate(${tape && tape["angle"]}deg)`,
    //     marginLeft: tape && tape["length"],
    //     backgroundColor: tape && tape["color"],
    //     zIndex: vValue + 1,
    //     opacity: 
    //         (!hover && "1") || (hover && ".8")
    // }{tape !== null ? <div style={tapeStyle}/>: null}



        "tape" : {
            "angle" : randomize([-30, -20, -10, -5, 2, 10, 20, 30]),
            "color" : randomize(theme.colorObjs["subMenuTapeColorUp"]),
            "length" :"80px",
        }

        "tape" : {
            "angle" : randomize([-36, -27, -13, -7, 5, 13, 27, 36]),
            "color" : randomize(theme.colorObjs["subMenuTapeColorDown"]),
            "length" : "160px",
        }



        import { Component } from "react";
import styled from 'styled-components';

import AboutMe from "./AboutMe.jsx";
import Contact from "./Contact.jsx";

import { menuMenu, menuAboutMe, menuContact } from '../../_data/_Data.jsx';
import theme from "../../css/_Theme.jsx";

const MenuDiv = styled.div`
    @media (max-width: 1900px){transform: scale(0.95, 0.95)};
    @media (max-width: 1750px){transform: scale(0.9, 0.9)};
    @media (max-width: 1400px){transform: scale(0.85, 0.85)};
    @media (max-width: 1150px){transform:scale(0.8, 0.8)}; 
    @media (max-width: 900px){transform: scale(0.75, 0.75)};
    @media (max-width: 750px){transform: scale(0.7, 0.7)};
    @media (max-width: 400px){transform: scale(0.65, 0.65)};
    
    transform-origin: bottom left;
    position: fixed;
    z-index: 1000;
    display: grid;
    grid-gap: 15px;
    margin-left: -30px;
    bottom: 3%;
`;
const MenuObj = styled.div`
    button {
        padding-left: 30px;
        width: 260px;
        height: 65px;
        border: ${({line})=> line};
        box-shadow: 5px 5px #000000;
        .open {
            font-weight: 400;
            font-size: 24px;
            width: 260px;
            letter-spacing: -1px;
            text-align: center;
            align-items: auto;
        }
        .close {
            position: absolute;
            color: #ffffff;
            z-index: 100;
            margin-left: ${({order}) => 
                order === 1 ? "101px" : 
                (order === 2 ? "15px" : null)};
            margin-top: ${({order}) => 
                order === 1 ? "-68px" : 
                (order === 2 ? "-150px" : null)
            };
            font-size: 13px;
            font-weight: 600;
            white-space: nowrap;
            transform: rotate(-90deg);
    }}
    .postIt {
        &:hover {
            text-decoration-line: line-through;
            text-decoration-thickness: 3.5px;
            box-shadow: 6px 6px 6px #999999;
        }
        &:active {
            text-decoration-line: line-through;
            text-decoration-thickness: 2px;
            box-shadow: 2px 2px 2px #666666;
    }}
    .postItAfter {
        width: ${({order}) => 
                order === 1 ? "102px" : 
                (order === 2 ? "16px" : null)
            };
        box-shadow: none;
        border-right: 0px;
        &:hover {
            box-shadow: -4px 3.5px 3.5px rgba(0, 0, 0, .5);
        }
        &:after {
            content: "";
            position: absolute;
            width: 68px;
            height: ${({order}) => 
                order === 1 ? "67px" : 
                (order === 2 ? "150px" : null)
            };
            left: ${({order}) => 
                order === 1 ? "134px" : 
                (order === 2 ? "48px" : null)
            };
            margin-top: ${({order}) => 
                order === 1 ? "-101px" : 
                (order === 2 ? "-184px" : null)
            };
            background-color: #000000;
        }
        &:hover:after {
            box-shadow: 0rem -.1rem .8rem rgba(0, 0, 0, .3);
        }
        &:before {
            content: "";
            position: absolute;
            left: ${({order}) => 
                order === 1 ? "134px" : 
                (order === 2 ? "48px" : null)
            };
            margin-top: -34px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 68px 68px 0 0;
            border-color: #000000 transparent transparent transparent;
    }}
`;
const Trash = styled.div`
    z-index: 1000;
    right: 20px; 
    top: 20px; 
    position: absolute;
    width: ${({width}) => width}px; 
    height: ${({height}) => height}px; 
    border-radius: ${({radius}) => radius}px;
    border: 2px solid black;
    background-color: white;
    box-shadow: 2px 2px 2px #666666;
    
    &:after {
        content: "";
        display: block;
        border: 1px solid black;
        width: 85%;
        height: 85%;
        border-radius: 85%;
        position: absolute;
        z-index: 1;
        background-color: white;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
    }

    .trashInner {
        border: 1px solid black;
        width: 70%;
        height: 70%;
        border-radius: 70%;
        position: absolute;
        z-index: 2;
        background-color: black;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);

        &:after {
            content: "";
            display: block;
            border: 1px solid white;
            width: 80%;
            height: 80%;
            border-radius: 80%;
            position: absolute;
            z-index: 3;
            background-color: black;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        }
    }

    .trashInnerInner {
        border: 1px solid white;
        width: 80%;
        height: 80%;
        border-radius: 80%;
        position: absolute;
        z-index: 4;
        background-color: blue;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);

        &:after {
            content: "";
            display: block;
            border: 1px solid white;
            width: 75%;
            height: 75%;
            border-radius: 75%;
            position: absolute;
            z-index: 5;
            background-color: red;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        }
    }

    .trashInnerInnerInner {
        border: 1px solid black;
        width: 50%;
        height: 50%;
        border-radius: 50%;
        position: absolute;
        z-index: 6;
        background-color: yellow;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);

        &:after {
            content: "";
            display: block;
            border: 1px solid black;
            width: 50%;
            height: 50%;
            border-radius: 50%;
            position: absolute;
            z-index: 7;
            background-color: yellow;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
        }
    }

    .trashPoint {
        border: 1px solid black;
        width: 1%;
        height: 1%;
        border-radius: 100%;
        position: absolute;
        z-index: 8;
        background-color: black;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
    }
`;
const value = 200

class Menu extends Component {
    constructor(props){
        super(props)
        this.state = {
            menu: {}, 
            aboutMe: {},
            cor: {}
        }
        this.postItHandler = this.postItHandler.bind(this)
        this.postItReorder = this.postItReorder.bind(this)
        this.postItClose = this.postItClose.bind(this)
    }

    componentDidMount(){
        this._menu()
        this._aboutMe()

        this.setState({ cor : {
                clientWidth : document.body.clientWidth,
                X: document.body.clientWidth-value,
                Y: value
        }})
    }

    componentDidUpdate(){
        const width = document.body.clientWidth

        if(this.state.cor.clientWidth !== width){
            this.setState({ cor : {
                clientWidth : width,
                X: document.body.clientWidth-value,
                Y: value
            }})
        }
    }

    _menu(){
        const menuObj = {}
        
        menuMenu.map(v => Object.assign(menuObj, {
            [v.title] : false
        }))
        this.setState({ menu : menuObj })
    }
    _aboutMe(){
        const aboutMeObj = {}

        menuAboutMe.map(v => Object.assign(aboutMeObj, {
            [menuAboutMe.indexOf(v)] : {
                "zValue": menuAboutMe.indexOf(v),
                "bool" : false
        }}))
        this.setState({ aboutMe : aboutMeObj })
    }
    postItHandler(v){
        const bool = this.state.menu[v]
        const menuObj = this.state.menu
        const aboutMeObj = this.state.aboutMe
        
        if(v === "AboutMe"){
            if(bool === true){
                for(let key in aboutMeObj){
                    aboutMeObj[key]["zValue"] = parseInt(key)
                    aboutMeObj[key]["bool"] = false
            }}else{ 
                for(let key in aboutMeObj){
                    aboutMeObj[key]["bool"] = true    
        }}}
        menuObj[v] = !bool

        this.setState({
            menu : menuObj,
            aboutMe : aboutMeObj
        })
    }
    postItClose(num){
        const aboutMeObj = this.state.aboutMe
        aboutMeObj[num]["bool"] = false

        this.setState({ aboutMe : aboutMeObj })
    }
    postItReorder(num){
        const aboutMeObj = this.state.aboutMe
        const last = Object.keys(aboutMeObj).length-1

        for(let key in aboutMeObj) aboutMeObj[key]["zValue"]--

        aboutMeObj[num]["zValue"] = last
        this.setState({ aboutMe : aboutMeObj })
    }

    render(){
        const { menu, aboutMe, cor }  = this.state
        const { X, Y } = cor

        return(<>
            {menu["AboutMe"] 
                ?   <> 
                    {menuAboutMe.map((v, i) => aboutMe[i]["bool"] 
                        ? <AboutMe 
                            X={X}
                            Y={Y}
                            close={this.postItClose}
                            order={this.postItReorder}
                            zValue={aboutMe[i]["zValue"]} 
                            img={v["img"]}
                            width={v["width"]}
                            color={v["color"]}
                            borColor={v["borColor"]}
                            content={v["content"]}
                            key={i}
                            num={i}
                        />
                        : null
                    )}
                    <Trash
                        width={document.body.clientWidth-X}
                        height={Y} 
                        radius={Y}
                    >
                        <div className="trashInner">
                            <div className="trashInnerInner">
                                <div className="trashInnerInnerInner">
                                </div>
                            </div>
                        </div>
                    </Trash>
                    </>
                :   null}
            <Contact 
                prfFront={menuContact["front"]}
                prfBack={menuContact["back"]}
                mail={menuContact["mail"]}
                onContact={menu["Contact"] ? true : false}
            />
            <MenuDiv>
                {menuMenu.map(v =>
                    <MenuObj
                        key={v["title"]}
                        line={v["line"]}
                        order={v["order"]}
                    > 
                        <button 
                            onClick={()=> this.postItHandler(v["title"])}
                            className={menu[v["title"]] ? "postItAfter": "postIt"}
                            style={{backgroundColor: v["color"]}} 
                        >
                            {menu[v["title"]] 
                                ? <div className="close">Close All</div>
                                : <div className="open">{v["title"]}</div>
                            }
                        </button>
                    </MenuObj>
                )}
            </MenuDiv>
        </>)
    }
}

export default Menu;


    height: ${({height}) => height}vw;
    width: ${({width}) => width}%;
    margin-top: ${({marginTop}) => marginTop}vw;
    margin-left: ${({marginLeft}) => marginLeft}vw;
    position: relative;

    .box {
        width: 115%;
        height: 100%;
        float: ${({LorR}) => LorR === "L" ? "left" : "right"};
        background-image: url("${Iphone}");
        background-position: center; 
        background-repeat: no-repeat;
        background-size: cover;
        .img {
            display: block;
            height: auto;
            width: 62%;
            float: right;
            margin-top: 21%;
            margin-right: 7%;
            border: .02rem solid #ccc;
        }

-------

        import { useLayoutEffect, useEffect, useRef, useState, useCallback} from "react";
import { useWindowSize } from "../../_data/_Functions.jsx";
import styled from "styled-components";
import { useLocation } from "react-router-dom";


const FootnoteObjDiv = styled.div`
    font-size: .7rem;
    font-weight: 600;
    letter-spacing: -.01rem;
    white-space: nowrap;
    position: absolute;
    transition: all .2s ease;
    z-index: ${({order}) => 10 - order + 1};
    
    .notSticky {
        position: absolute;
        top: calc(${({top}) => top}px - 2.5rem);
        padding-right: 1rem;
        transform: rotate(-90deg);
        transform-origin: top left;
        opacity: ${({sticky}) => sticky === false ? "1" : "0"};
    }
    .sticky {
        position: fixed;
        top: 3rem;
        padding-right: 1rem;
        transform: rotate(-90deg);
        transform-origin: top left;
        background-color: white;
        margin-top: ${({order, txtLength}) => (order + 0.2) * 4}rem;
        display: ${({sticky}) => sticky === true ? "" : "none"};
        
        &:before {    
            content: "";
            display: block;
            width: 1rem;
            height: 2rem;
            margin-left: -1rem;
            position: absolute;
            z-index: -1;
            background-image: linear-gradient(to right,
                rgba(255,255,255,0) 0%, 
                rgba(255,255,255,1) 100%)
            ;
        }
    }
`;

const options = {
    root: null,
    rootMargin: "100px"
}

const Footnote = ({el, text, ord}) => {
    const ref = useRef()
    const height = useWindowSize().height
    const width = useWindowSize().width
    
    const [elTop, setElTop] = useState(null)
    const [sticky, setSticky] = useState(false)
    const [stickyTxt, setStickyTxt] = useState("")

    useEffect(() => {
        let newText = text
        if(text.length > 8) newText = text.slice(0, 8)

        setStickyTxt(newText)
    }, [])

    useEffect(() => {
        const top = el.current.getBoundingClientRect().top
        setElTop(top)

    }, [width, height, el.current])

    useEffect(() => {
        const observer = new IntersectionObserver(callBack, options)
        if(ref.current) observer.observe(ref.current)

        return () => {
            if(ref.current) observer.unobserve(ref.current)
        }
    }, [ref, el.current])

    const callBack = useCallback(([entry]) => {
        if(entry.isIntersecting || entry.boundingClientRect.top > 20) {
            setSticky(false)
        }else{
            setSticky(true)
        }
    },[])

    const intoEl = () => {
        el.current.scrollIntoView({
            behavior: "smooth", 
            block: "start", 
        })
    } 
    return(
        <FootnoteObjDiv 
            top={elTop}
            order={ord}
            sticky={sticky}
        >
            <div 
                // onClick={intoEl} 
                className="notSticky"
                ref={ref}
            >
                {text}
            </div>
            <div 
                // onClick={intoEl} 
                className="sticky"
            >
                {stickyTxt}
            </div>
        </FootnoteObjDiv>
    )
}

export default Footnote;



            <MainText 
                marginTop={"0"}
                marginBottom={"0"}
                mainText={mainText["1"]}
                color={color["sub"]}
            />
            <MainText 
                marginTop={"0"}
                marginBottom={"0"}
                mainText={mainText["2"]}
                color={color["sub"]}
            />




export const media = Object.keys(sizes).reduce((acc, label) => {
    acc[label] = (...args) => css`
        @media screen and (min-width: ${sizes[label][0]}px) and (max-width: ${sizes[label][1]}px) {
            ${css(...args)};
        }
    `
    return acc
}, {})


    const scrRef = useRef()
    
    useEffect(() => {
        scrRef.current.scrollIntoView()
    }, [])




            &:before {
                border-right: ${theme.lines["subTagLineLight"]};
                content: "";
                position: absolute;
                background-color: white;
                width: .8rem;
                height: .8rem;
                border-radius: 2rem;
                left: -16%;
                top: 135%;
                z-index: 100;
            }
            &:after {
                border-left: ${theme.lines["subTagLineLight"]};
                content: "";
                position: absolute;
                background-color: white;
                width: .8rem;
                height: .8rem;
                border-radius: 2rem;
                right: -16%;
                top: 135%;
                z-index: 100;
            }

                            // margin-top: 1%;
                // background-color: #F3F3F3;
                // border-bottom: 0.01rem solid #999;
                // border-right: 0.01rem solid #999;
                // border-left: 0.01rem solid #bbb;
                // border-top: 0.01rem solid #bbb;
                // box-shadow: .05rem .05rem .05rem rgba(0, 0, 0, .2);
                // border-radius: .2rem;
                // font-style: normal;
                // font-weight: 600;
                // color: #888;




    &:before { ${({hover}) => hover ? `    
        pointer-events: none;
        content: "";
        display: block;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        position: absolute;
        z-index: 100;
        background: linear-gradient(90deg, rgba(255,255,255,1) 1%, rgba(255,255,255,0) 3% 5%, rgba(255,255,255,0) 95% 97%, rgba(255,255,255,1) 99% 100%);
    ` : null}}





    .link {
        ${({theme}) => theme.mobile`display: none;`}
        margin-left: 16rem;
        margin-top: -3.8rem;
        margin-left: 16rem;
        margin-top: -3.8rem;
        display: flex;
        cursor: pointer;
    }
                    // <span className="link">
                    //     {link.map(v =>
                    //         <LinkA 
                    //             color={v["color"]} 
                    //             href={v["link"]} 
                    //             key={v["title"]}
                    //             content={v["title"]}
                    //         >
                    //             {v["title"]}
                    //         </LinkA>)
                    //     }
                    // </span>
const LinkA = styled.a`
    font-size: ${theme.fontObjs["linkA"]["fontSize"]};
    font-weight: ${theme.fontObjs["linkA"]["fontWeight"]};
    font-family: ${theme.fontObjs["linkA"]["fontFamily"]};
    letter-spacing: -.025rem;
    margin-left: 1.8rem;
    cursor: pointer;

    &:after { 
        content: "${({content}) => content}";
        position: absolute;
        height: .2rem;
        margin-top: -2.2rem;
        color: transparent;
        visibility: hidden;
        display: block;
        background-image: linear-gradient(to right, ${({color}) => color});
        background-repeat: no-repeat;
        background-position: 120%, 122%, 0 10%;
        background-size: 100% 10px;
    }
    &:hover:after { 
        visibility: visible;
    }
`;


