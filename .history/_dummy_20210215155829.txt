import { Component } from "react"
import styled from "styled-components";

const BoardDiv = styled.div`
    background-color:darkseagreen;
    width: 100%;
    background: #eab92d;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#eab92d', endColorstr='#c79810', GradientType=1);
`;

const NoteDiv = styled.div`
    height: 150px;
    width: 150px;
    background-color: yellow;
    margin: 2px 0;
    position: absolute;
    cursor: -webkit-grab;
    box-shadow: 5px 5px 15px 0 rgba(0, 0, 0, .2);

    &:active {
        cursor: -webkit-grabbing;
    }
    &:hover > span {
        opacity: 1;
    }
    & > span {
        position: absolute;
        bottom: 2px;
        right: 2px;
        opacity: 0;
        transition: opacity .25s linear;
    }
    & button {
        margin: 2px;
    }
    & > textarea {
        height: 75%;
        background: rgba(255, 255, 255, .5);
    }
    .glyphicon-plus {
        position: fixed;
        top: 10px;
        right: 10px;
    }
`;

class Note extends Component{
    constructor(props) {
        super(props)
        this.edit = this.edit.bind(this)
        this.remove = this.remove.bind(this)
        this.save = this.save.bind(this)
        this.handleClick = this.handleClick.bind(this)
        this.renderDisplay = this.renderDisplay.bind(this)
        this.renderForm = this.renderForm.bind(this)
        this.state = {
            checked : false,
            editing : false
        }
    }
    
    //Event methods
    componentWillMount() {
        this.style = {
            right : this.randomBetween(0, window.innerWidth-150) + 'px',
            top : this.randomBetween(0, window.innerHeight - 150) + 'px',
            transform : 'rotate( ' + this.randomBetween(-15, 15) + 'deg)'                    
        }                         
    }
    componentDidMount() {
        var mine = this._input        
        $(mine).draggable()
    }
    randomBetween(min, max) {
        return (min + Math.ceil(Math.random() * max))
    }
    edit() {
      this.setState({editing : true})
    }
    save() {
        this.props.onChange(this.refs.newText.value, this.props.index)
        this.setState({editing : false})
    }
    remove() {
        this.props.onRemove(this.props.index)
    }
    handleClick() {
        this.setState({checked: !this.state.checked})
    }
    
    renderDisplay() {
        return (
            <NoteDiv 
                ref={(c) => this._input = c} 
                style = {this.style}
            > 
                <p>{this.props.children}</p>
                    <span>
                        <button 
                            onClick={this.edit} 
                            className='btn btn-primary glyphicon glyphicon-pencil'
                        >
                            edit
                        </button>
                        <button 
                            onClick={this.remove} 
                            className='btn btn-danger glyphicon glyphicon-trash'
                        >
                            delete
                        </button>
                    </span>
            </NoteDiv>
        )
    }
    renderForm() {
        return(
            <NoteDiv 
                ref="myNote" 
                style={this.style} 
            >
                <textarea 
                    ref='newText' 
                    defaultValue={this.props.children} 
                    className='form-control'
                />
                <button 
                    className='btn btn-success btn-sm glyphicon glyphicon-floppy-disk' 
                    onClick={this.save}
                >
                    save
                </button> 
            </NoteDiv>
        )
    }
    render() {
        if(this.state.editing)return this.renderForm()
        else return this.renderDisplay()
    }
}

//parent component for notes
class Board extends Component{
    constructor() {
        super()
        this.update = this.update.bind(this)
        this.eachNote = this.eachNote.bind(this)
        this.remove = this.remove.bind(this)
        this.add = this.add.bind(this)
        this.state = {
            notesStringArray : []
        }
    }
    
    //Event methods
    nextId() {
        this.uniqueId = this.uniqueId || 0
        return this.uniqueId++
    }
    update(newText, i) {
        var arr = this.state.notesStringArray
        arr[i].note = newText
        this.setState({notesStringArray : arr})
    }
    eachNote(element, i) {
        return(
            <Note 
                key={element.id}
                index={i}
                onChange={this.update}
                onRemove={this.remove}
            >
                {element.note}
            </Note>
        )
    }
    remove(index) {
        var arr = this.state.notesStringArray
        var elm = arr[index]
        arr.splice(index, 1)
        this.setState({notesStringArray : arr})
        return elm
    }
    componentWillMount() {
        var self = this
        if(this.props.count) {
            $.getJSON('http://baconipsom.com/api/?type=all-meat&sentences=' + this.props.count + '&start-with-lorem=1&callback=?', function(results) {
                var data = results[0].split('. ').forEach(function(sentence) {
                   self.add(sentence.substring(0, 40)) 
                })
            })        
        }
    }
    add(text) {        
        var arr = this.state.notesStringArray
        arr.push({
            id : this.nextId(),
            note : text
        })
        JSON.stringify(arr)
        this.setState({notesStringArray : arr})
    }
    
    render() {
        return(
            <BoardDiv>
                {this.state.notesStringArray.map(this.eachNote)}
                <button 
                    className='btn btn-sm glyphicon glyphicon-plus btn-success' 
                    onClick={this.add.bind(null, "New Note!")}
                >
                    +
                </button>    
            </BoardDiv>
        )
    }
}


Board.propTypes = {
    count : function(props, propName) {
        if(typeof props[propName] !== "number") {
            return new Error('THe count property must be a number')
        }
        if(props[propName] > 100) {    
            return new Error('Creating '+props[propName] + 'notes is ridiculous ')
        }
    }
}

ReactDOM.render(<Board count={50}></Board>, document.getElementById('react-container'))



----


    &:hover {
        text-decoration-line: line-through;
        text-decoration-thickness: .15em;
        text-decoration-color: ${props => props.hoverColor};
    }

----


    _portFolio(){
        const portFolioObj = {}

        all_portFolio.map(v => Object.assign(portFolioObj, {
            [v.title] : {
                "bool" : false,
                "component" : v.component
        }}))
        Object.assign(portFolioObj, {
            "Home": {
                "bool" : true,
                "component" : Projects(this.portFolioClick)
        }})
        this.setState({ portFolio : portFolioObj })
    }

----

    portFolioClick(v){
        console.log(this.state.portFolio)
        const portFolioObj = this.state.portFolio

        for(let key in portFolioObj) portFolioObj[key]["bool"] = false
        
        portFolioObj[v]["bool"] = true

        this.setState({ portFolio : portFolioObj })
    }

----

        const truePortFolio = findObject(portFolio, true)
                    {truePortFolio && truePortFolio["component"]}

----

import { Component } from "react";
import { Route } from 'react-router-dom';
import styled from 'styled-components';
import AboutMe from "../components/_AboutMe.jsx";
import Contact from "../components/_Contact.jsx";

import { line_1, line_3, rainbow, app_menu, app_aboutMe, all_portFolio, findObject } from '../_data/_Functions.jsx';

const LeftDiv = styled.div`
    position: fixed;
    z-index: 100;
    width: 30vw;
    height: 100vh;
    top: 0;
    background-color: #EEE; 
    overflow: hidden;

    .index {
        @media all and (min-width:0px) and (max-width:1080px) {transform: scale(0.8, 0.8);}
        @media all and (min-width:1081px) {transform: scale(1, 1);}
        transform-origin: top right;
        transition: all .2s ;
        position: absolute;
        z-index: 100;
        width: 35px;
        height: 50vh;
        margin-top: 3.5em;
        right: 0;
        float: right;
    }
    &:hover .index {
        @media all and (min-width:0px) and (max-width:1080px) {transform: scale(1.2, 1.2);}
        @media all and (min-width:1081px) {transform: scale(1.4, 1.4);}
    }
    .menu {
        position: fixed;
        display: grid;
        grid-gap: 15px;
        margin-left: -30px;
        bottom: 60px;
    }
`;
const IndexContent = styled.button`
    width: 40px;
    height: 35px;
    float: right;
    padding: 0;
    white-space: nowrap;
    transition: all .2s ease;
    background-color: ${props => props.color};
    
    &:hover {
        width: 105px;
    }
    .img {
        opacity: 1;
        margin-left: 50px;
        border: 2.5px solid ${props => props.color};
        width: 30px;
        height: 30px;
    }
    .title {
        right: 120px;
        margin-top: -35px;
        position: absolute;
        opacity: 0;
    }
    &:hover .title {
        opacity: 1;
    }
`;
const MenuDiv = styled.div`
    button {
        padding-left: 30px;
        width: 210px;
        height: 54px;
        border: ${line_3};
        box-shadow: 5px 5px black;

        .open {
            font-weight: 400;
            font-size: 21px;
            width: 210px;
            letter-spacing: -1px;
            text-align: center;
            align-items: auto;
        }
        .close {
            position: absolute;
            color: white;
            z-index: 100;
            margin-left: ${props => props.leftText};
            margin-top: ${props => props.marginText};
            font-size: 12px;
            font-weight: 600;
            white-space: nowrap;
            transform: rotate(-90deg);
        }
    }
    .postIt {
        &:hover {
            text-decoration-line: line-through;
            text-decoration-thickness: 3.5px;
            box-shadow: 6px 6px 6px #999;
        }
        &:active {
            text-decoration-line: line-through;
            text-decoration-thickness: 2px;
            box-shadow: 2px 2px 2px #666;
        }
    }
    .postItAfter {
        width: ${props => props.width};
        box-shadow: none;
        border-right: 0px;

        &:hover {
            box-shadow: -4px 3.5px 3.5px rgba(0, 0, 0, .5);
        }
        &:after {
            content: "";
            position: absolute;
            width: 58px;
            height: ${props => props.height};
            left: ${props => props.left};
            margin-top: ${props => props.margin};
            background-color: black;
        }
        &:hover:after {
            box-shadow: 0em -.1em .8em rgba(0, 0, 0, .3);
        }
        &:before {
            content: "";
            position: absolute;
            left: ${props => props.left};
            margin-top: -29px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 58px 58px 0 0;
            border-color: black transparent transparent transparent;
        }
    }
`;



class Left extends Component {
    constructor(props){
        super(props)
        this.state = {
            menu: {}, 
            aboutMe: {},
            portFolio: {},
        }
        this.postItHandler = this.postItHandler.bind(this)
        this.postItClose = this.postItClose.bind(this)
        this.postItReorder = this.postItReorder.bind(this)
    }

    componentDidMount(){
        this._menu()
        this._aboutMe()
    }
    _menu(){
        const menuObj = {}
        
        app_menu.map(v => Object.assign(menuObj, {
            [v.title] : false
        }))
        this.setState({ menu : menuObj })
    }
    _aboutMe(){
        const aboutMeObj = {}

        app_aboutMe.map(v => Object.assign(aboutMeObj, {
            [app_aboutMe.indexOf(v)] : {
                "value": app_aboutMe.indexOf(v),
                "bool" : false
        }}))
        this.setState({ aboutMe : aboutMeObj })
    }
    postItHandler(v){
        const bool = this.state.menu[v]
        const menuObj = this.state.menu
        const aboutMeObj = this.state.aboutMe
        
        if(v === "AboutMe"){
            if(bool === true){
                for(let key in aboutMeObj){
                    aboutMeObj[key]["value"] = parseInt(key)
                    aboutMeObj[key]["bool"] = false
            }}else{ 
                for(let key in aboutMeObj){
                    aboutMeObj[key]["bool"] = true    
        }}}
        menuObj[v] = !bool

        this.setState({
            menu : menuObj,
            aboutMe : aboutMeObj
        })
    }
    postItClose(num){
        const aboutMeObj = this.state.aboutMe
        aboutMeObj[num]["bool"] = false

        this.setState({ aboutMe : aboutMeObj })
    }
    postItReorder(num){
        const aboutMeObj = this.state.aboutMe
        const last = Object.keys(aboutMeObj).length-1

        for(let key in aboutMeObj) aboutMeObj[key]["value"]--

        aboutMeObj[num]["value"] = last
        this.setState({ aboutMe : aboutMeObj })
    }


    render(){
        const { menu, aboutMe }  = this.state

        return(<>
            {menu["AboutMe"] 
                ? app_aboutMe.map((v, i) => 
                    aboutMe[i]["bool"] 
                    ? <AboutMe 
                        close={this.postItClose}
                        order={this.postItReorder}
                        value={aboutMe[i]["value"]} 
                        tape={v["tape"]}
                        width={v["width"]}
                        color={v["color"]}
                        borColor={v["borColor"]}
                        content={v["content"]}
                        key={i}
                        num={i}/>
                    : null)
                : null
            }
            {menu["Contact"] 
                ? <Contact/> 
                : null
            }
            <LeftDiv>
                <div className="index">
                    {all_portFolio.map(v => 
                        <IndexContent 
                            color={v["color"]}
                            key={v["title"]}
                        >
                            <img className="img" src={v["img"]} alt={""}/>
                            <div className="title">{v["title"]}</div>
                        </IndexContent>
                    )}
                </div>
                <div className="menu">
                    {app_menu.map(v =>
                        <MenuDiv
                            left={v["left"]}
                            leftText={v["leftText"]}
                            margin={v["margin"]}
                            marginText={v["marginText"]}
                            height={v["height"]}
                            width={v["width"]}
                            key={v["title"]}
                        > 
                            <button 
                                onClick={()=> this.postItHandler(v["title"])}
                                className={menu[v["title"]] ? "postItAfter": "postIt"}
                                style={{backgroundColor: v["color"]}} 
                            >
                                {menu[v["title"]] 
                                    ? <div className="close">Close All</div>
                                    : <div className="open">{v["title"]}</div>
                                }
                            </button>
                        </MenuDiv>
                    )}
                </div>
            </LeftDiv>
        </>)
    }
}

export default Left;

----

import { Component } from "react";
import { Route } from 'react-router-dom';

import styled from 'styled-components';

import { line_1, line_3, rainbow, app_menu, app_aboutMe, all_portFolio, findObject } from '../_data/_Functions.jsx';


const RightDiv = styled.div`
    margin-left: 30vw;
    top: 0;

    header {
        display: flex;  
        position: fixed;
        z-index: 100;
        border-left: ${line_1};
        border-bottom: ${line_1};
        background-color: white;
        width: 70vw;
        height: 3.5em;

        button {
            font-size: 1.5em;
            font-weight: 500;
            width: 100%;
            text-align: center;
            letter-spacing: -.01em;
        }
        button:after { 
            content: "";
            position: absolute;
            width: 30%;
            height: .12em;
            left: 35%;
            right: 35%;
            top: 50%;
            bottom: 50%;
            visibility: hidden;
            background: ${rainbow};
        }
        button:hover:after { 
            visibility: visible;
        }
    }

    .rightContents {
        border-left: ${line_1};
        position: fixed;
        z-index: 50;
        width: 70vw;
        overflow: auto;
        margin-top: 3.5em;
        height: 100%;
    }
`;


class Right extends Component {
    render(){
        return(
            <RightDiv>
                <header>
                    <button>
                        Home
                    </button>
                </header>
                <div className="rightContents">
                </div>
            </RightDiv>
        )
    }
}

export default Right;

----


const FooterDiv = styled.div`
    width: ${all_div["RWidth"]}vw;
    margin-left: ${all_div["LWidth"]}vw;
    height: 8vh;
    margin-top: 92vh;
    position: fixed;
    overflow: scroll;
    border-left: ${line_1};
    border-top: ${line_1};
    background-color: ${deepYellow};
    
`;

----

cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='9.84 41.6 14.73 39.16 22.07 31.82 22.07 34.27 26.96 44.05 31.85 44.05 31.85 39.16 26.96 29.38 36.74 29.38 36.74 26.93 9.84 0.03 9.84 41.6'/%3E%3Cpolygon class='cls-2' points='12.29 4.92 14.73 4.92 14.73 2.48 12.29 2.48 12.29 0.03 9.84 0.03 9.84 41.6 14.73 41.6 14.73 39.16 12.29 39.16 12.29 4.92'/%3E%3Crect class='cls-2' x='14.73' y='4.92' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='17.18' y='7.37' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='19.63' y='9.82' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='22.07' y='12.26' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='24.52' y='14.71' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='26.96' y='17.15' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='29.41' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='31.85' y='22.04' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='34.3' y='24.49' width='2.45' height='2.45'/%3E%3Cpolygon class='cls-2' points='36.74 26.93 36.74 29.38 26.96 29.38 26.96 34.27 29.41 34.27 29.41 31.82 39.19 31.82 39.19 26.93 36.74 26.93'/%3E%3Crect class='cls-2' x='29.41' y='34.27' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='26.96' y='44.05' width='4.89' height='2.45'/%3E%3Crect class='cls-2' x='24.52' y='39.16' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='22.07' y='34.27' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='19.63' y='31.82' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='17.18' y='34.27' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='14.73' y='36.71' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='31.85' y='39.16' width='2.45' height='4.89'/%3E%3C/svg%3E"), auto; 
cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='13.29 2.48 10.84 2.48 10.84 24.49 7.4 24.49 7.4 23.04 3.51 23.04 3.51 24.49 1.06 24.49 1.06 29.38 3.51 29.38 3.51 31.82 5.95 31.82 5.95 36.71 8.4 36.71 8.4 41.6 10.84 41.6 10.84 46.5 13.29 46.5 13.29 53.83 35.74 53.83 35.74 46.5 38.19 46.5 38.19 39.16 40.63 39.16 40.63 23.04 39.19 23.04 39.19 22.04 38.19 22.04 38.19 20.6 36.74 20.6 36.74 19.6 35.74 19.6 35.74 18.15 31.85 18.15 31.85 17.15 30.85 17.15 30.85 15.34 24.52 15.34 24.52 14.71 23.52 14.71 23.52 13.26 18.63 13.26 18.63 2.48 16.18 2.48 16.18 1.03 13.29 1.03 13.29 2.48'/%3E%3Crect class='cls-2' x='2.51' y='29.38' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='4.95' y='31.82' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='2.51 24.49 7.4 24.49 7.4 22.04 2.51 22.04 2.51 24.49 0.06 24.49 0.06 29.38 2.51 29.38 2.51 24.49'/%3E%3Cpolygon class='cls-2' points='9.84 26.93 9.84 29.38 12.29 29.38 12.29 2.48 9.84 2.48 9.84 24.49 7.4 24.49 7.4 26.93 9.84 26.93'/%3E%3Crect class='cls-2' x='7.4' y='36.71' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='9.84' y='41.61' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='34.3 51.39 14.73 51.39 14.73 46.5 12.29 46.5 12.29 53.83 36.74 53.83 36.74 46.5 34.3 46.5 34.3 51.39'/%3E%3Crect class='cls-2' x='36.74' y='39.16' width='2.45' height='7.34'/%3E%3Crect class='cls-2' x='12.29' y='0.03' width='4.89' height='2.45'/%3E%3Cpolygon class='cls-2' points='17.18 24.49 19.63 24.49 19.63 14.71 24.52 14.71 24.52 12.26 19.63 12.26 19.63 2.48 17.18 2.48 17.18 24.49'/%3E%3Cpolygon class='cls-2' points='24.52 24.49 26.96 24.49 26.96 17.15 31.85 17.15 31.85 14.71 24.52 14.71 24.52 24.49'/%3E%3Cpolygon class='cls-2' points='31.85 26.93 34.3 26.93 34.3 19.6 36.74 19.6 36.74 17.15 31.85 17.15 31.85 26.93'/%3E%3Crect class='cls-2' x='36.74' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='39.19' y='22.04' width='2.45' height='17.12'/%3E%3C/svg%3E"), pointer;
cursor: url("data:image/svg+xml,%3Csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 54 54'%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:%231c1c1c;%7D%3C/style%3E%3C/defs%3E%3Cpolygon class='cls-1' points='13.29 2.48 10.84 2.48 10.84 24.49 7.4 24.49 7.4 23.04 3.51 23.04 3.51 24.49 1.06 24.49 1.06 29.38 3.51 29.38 3.51 31.82 5.95 31.82 5.95 36.71 8.4 36.71 8.4 41.6 10.84 41.6 10.84 46.5 13.29 46.5 13.29 53.83 35.74 53.83 35.74 46.5 38.19 46.5 38.19 39.16 40.63 39.16 40.63 23.04 39.19 23.04 39.19 22.04 38.19 22.04 38.19 20.6 36.74 20.6 36.74 19.6 35.74 19.6 35.74 18.15 31.85 18.15 31.85 17.15 30.85 17.15 30.85 15.34 24.52 15.34 24.52 14.71 23.52 14.71 23.52 13.26 18.63 13.26 18.63 2.48 16.18 2.48 16.18 1.03 13.29 1.03 13.29 2.48'/%3E%3Crect class='cls-2' x='2.51' y='29.38' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='4.95' y='31.82' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='2.51 24.49 7.4 24.49 7.4 22.04 2.51 22.04 2.51 24.49 0.06 24.49 0.06 29.38 2.51 29.38 2.51 24.49'/%3E%3Cpolygon class='cls-2' points='9.84 26.93 9.84 29.38 12.29 29.38 12.29 2.48 9.84 2.48 9.84 24.49 7.4 24.49 7.4 26.93 9.84 26.93'/%3E%3Crect class='cls-2' x='7.4' y='36.71' width='2.45' height='4.89'/%3E%3Crect class='cls-2' x='9.84' y='41.61' width='2.45' height='4.89'/%3E%3Cpolygon class='cls-2' points='34.3 51.39 14.73 51.39 14.73 46.5 12.29 46.5 12.29 53.83 36.74 53.83 36.74 46.5 34.3 46.5 34.3 51.39'/%3E%3Crect class='cls-2' x='36.74' y='39.16' width='2.45' height='7.34'/%3E%3Crect class='cls-2' x='12.29' y='0.03' width='4.89' height='2.45'/%3E%3Cpolygon class='cls-2' points='17.18 24.49 19.63 24.49 19.63 14.71 24.52 14.71 24.52 12.26 19.63 12.26 19.63 2.48 17.18 2.48 17.18 24.49'/%3E%3Cpolygon class='cls-2' points='24.52 24.49 26.96 24.49 26.96 17.15 31.85 17.15 31.85 14.71 24.52 14.71 24.52 24.49'/%3E%3Cpolygon class='cls-2' points='31.85 26.93 34.3 26.93 34.3 19.6 36.74 19.6 36.74 17.15 31.85 17.15 31.85 26.93'/%3E%3Crect class='cls-2' x='36.74' y='19.6' width='2.45' height='2.45'/%3E%3Crect class='cls-2' x='39.19' y='22.04' width='2.45' height='17.12'/%3E%3C/svg%3E"), pointer;

----

/* font-family: 'Noto Sans KR' !important; */

----

const DictionaryDiv = styled.div`
    margin-top: .5rem;
    margin-left: 20%;
    margin-bottom: 50vh;
    text-align: justify;

    .dicContent {
        margin-left: 5%;
        margin-top: .5rem;
        letter-spacing: -.01rem;
        line-height: 1.2rem;
        font-family: 'Cormorant Garamond', serif;
        font-size: .8rem;
    }
    strong {
        margin-left: -5%;
        font-weight: 600;
        word-spacing: -.1rem;
        font-size: .64rem;
        font-family: 'IBM Plex Mono', monospace;
    }
`;
<div className="title">
Remark
</div>
<DictionaryDiv>
    <div className="dicContent">
        <strong>Assignment</strong> To design a new website and shopping experience with a high emphasis on user interactivity and brand content in a
functional yet beautiful design.
    </div>
    <div className="dicContent">
        <strong>Objective</strong> To create a better online e-commerce shopping experience for customers while also increasing awareness between social media and the product catalogue.
    </div>
    <div className="dicContent">
        <strong>Project Includes</strong> 
            <br/>Design Ideation
            <br/>Design Direction
            <br/>Final Design
            <br/>Design Presentation
    </div>
</DictionaryDiv>


----

import debounce from "lodash.debounce";
     const resetting = () => {
        setScrl(false)
        scrlRef.current.reset()
    }
    const reset = debounce(resetting, 250,  {'leading': true})


----
 
    position: absolute;
    z-index: 100000000;
    width: 40px;
    height: 40px;
    border: 3px solid #000000;
    border-radius: 100%;
    transform: translate(-25px, 40px) ${({theme}) => theme.scale};
    opacity: ${({theme}) => theme.opacity};
    pointer-events: none;
    transition: all .2s ease;
    transition-property: background-color, opacity, transform;

----